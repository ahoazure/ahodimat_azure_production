# Generated by Django 3.0.14 on 2023-12-20 12:00

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DCT_URLEndpointPathMapped',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='Path ID')),
                ('url', models.CharField(max_length=45, verbose_name='DCT URL')),
                ('username', models.CharField(max_length=45)),
                ('password', models.CharField(max_length=300)),
                ('endpoint', models.CharField(max_length=100, verbose_name='Resource Path')),
                ('resource_endpoint', models.CharField(max_length=2083, verbose_name='Resource URL Endpoint')),
                ('status', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Mapped Endpoint',
                'verbose_name_plural': 'Mapped Endpoints',
                'db_table': 'vw_dct_apipath_endpoint',
                'ordering': ('url',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DCT_Categoryoptions',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('category', models.PositiveIntegerField(blank=True, default=29, verbose_name='Category ID')),
                ('code', models.CharField(blank=True, max_length=45, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='DCT Disaggregation', null=True, verbose_name='Description')),
                ('reference', models.CharField(blank=True, default='DCT', max_length=255, null=True, verbose_name='Disaggregation Options')),
            ],
            options={
                'verbose_name': 'Category Option',
                'verbose_name_plural': 'Category Options',
                'db_table': 'dct_categoryoptions',
                'ordering': ('name',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DCT_Datasource',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='Datasource ID')),
                ('code', models.CharField(blank=True, max_length=45, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='DCT Datasource', null=True, verbose_name='Description')),
                ('reference', models.CharField(blank=True, default='DCT', max_length=255, null=True, verbose_name='Data Source')),
            ],
            options={
                'verbose_name': 'Data Source',
                'verbose_name_plural': 'Data Sources',
                'db_table': 'dct_datasource',
                'ordering': ('name',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DCT_Measuretype',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='Measure ID')),
                ('code', models.CharField(blank=True, max_length=45, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='Measure Type', null=True, verbose_name='Description')),
                ('reference', models.CharField(blank=True, default='DCT', max_length=255, null=True, verbose_name='Measure Reference')),
            ],
            options={
                'verbose_name': 'Measure Type',
                'verbose_name_plural': 'Measure Types',
                'db_table': 'dct_measuretype',
                'ordering': ('name',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DCTIndicators',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='Indicator ID')),
                ('code', models.CharField(blank=True, max_length=45, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='DCT indicator', null=True, verbose_name='Description')),
                ('reference', models.CharField(blank=True, default='DCT', max_length=255, null=True, verbose_name='Indicator Source')),
            ],
            options={
                'verbose_name': 'Indicator',
                'verbose_name_plural': 'Indicators',
                'db_table': 'dct_indicators',
                'ordering': ('name',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DCTLocations',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='LocID')),
                ('location_id', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Location ID')),
                ('code', models.CharField(blank=True, max_length=45, null=True, verbose_name='Location Code')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country Name')),
                ('locationlevel', models.CharField(blank=True, max_length=45, null=True, verbose_name='Level')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'db_table': 'dct_afro_locations',
                'ordering': ('id',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DCTMainConfigs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('dct_url', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator(message="Valid URL:'https://abc.com; or http://abc.com:8000'", regex='https?:\\/\\/(?:w{1,3}\\.)?[^\\s.]+(?:\\.[a-z]+)*(?::\\d+)?(?![^<]*(?:<\\/\\w+>|\\/?>))')], verbose_name='DCT URL')),
                ('dct_user', models.CharField(max_length=200, verbose_name='Username')),
                ('dct_passkey', models.CharField(max_length=300, verbose_name='Password')),
                ('status', models.BooleanField(choices=[(1, 'Active'), (0, 'Innactive')], default=1, verbose_name='Status')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Username/Email')),
            ],
            options={
                'verbose_name': 'DCT Setup',
                'verbose_name_plural': 'DCT Settings',
                'db_table': 'dct_main_configs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DCT_URLEndpointPath',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('api_endpoint', models.CharField(blank=True, max_length=250, verbose_name='API Endpoint')),
                ('status', models.BooleanField(choices=[(1, 'Active'), (0, 'Innactive')], verbose_name='Status')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date Created')),
                ('date_lastupdated', models.DateTimeField(auto_now=True, null=True, verbose_name='Date Modified')),
                ('url', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dctmetadata.DCTMainConfigs', verbose_name='DCT URL')),
            ],
            options={
                'verbose_name': 'API Endpoint:',
                'verbose_name_plural': 'API Endpoints',
                'db_table': 'dct_api_endpoint',
                'ordering': ('url',),
                'managed': True,
            },
        ),
    ]
